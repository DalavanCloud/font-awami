/*
    File: nastaliq_rules.gdl

    Graphite positioning rules for Awami Nastaliq
*/


table(positioning)

pass(1)

//
//	CURSIVE ATTACHMENT
//

#define cursive_attach(P)  c_exit_##P {att {to=@L; with=exit_##P; at=entr_##P}} c_entr_##P {insert=1} / _ MARKS2N ^ _=L ;

// Only used for beh so we don't need to allow upper and lower diacs:
#define cursive_attach2(P1, P2)  c_exit_##P1 {att {to=@L; with=exit_##P1; at=entr_##P2}} c_entr_##P2 {insert=1} / _ MARKS ^ _=L ;


#if (QUICKCOMPILE == 0)

cursive_attach(beh)
cursive_attach(behFinal)
cursive_attach(behHighTooth)
cursive_attach(behLowTooth)
cursive_attach2(behLowTooth, behPreFinalHehGoal)
cursive_attach(behPreReh)
cursive_attach(behPreNoon)
cursive_attach(jeem)
cursive_attach(reh)
cursive_attach(rehHgM)
cursive_attach(rehJkl)
cursive_attach(rehSshg)
cursive_attach(seen)
cursive_attach(sad)
cursive_attach(tah)
cursive_attach(feh)
cursive_attach(noon)
cursive_attach(hehgoalMedial)
cursive_attach(hehgoalFinal)
cursive_attach(chotiyehBfkl)
cursive_attach(lamKaf)

#endif  // QUICKCOMPILE

// Last resort:
(c_initial c_medial) {att.to=@L} (c_medial  c_final) {insert=1}  / _ MARKS2N ^ _=L ;

endpass; // 1

endtable;	// positioning


//
//  NUQTA POSITIONING
//

table(positioning)

pass(2)

// Upper and lower nuqta attachment

// Not really needed, because all glyphs with lower diacs can take upper diacs
//table(glyph)
//cTakes_n1Lower_and_nUpperDia = cTakes_n1LowerDia;
//cTakes_n1Lower_and_nUpperDia &= (cTakes_nUpperDia);
//endtable;

cTakes_n1LowerDia
	cn1LowerDia { attach {to = @B; at = n23LowerS; with = n23LowerM } }
	ctahUpperDia { attach {to = @B; at = tahUpperS; with = tahUpperM } }
	/ _=B  _=L  _=U;


cTakes_n1LowerDia
	cn1LowerDia { attach {to = @B; at = n1LowerS; with = n1LowerM } }
	cnUpperDia { attach {to = @B; at = nUpperS; with = nUpperM } }
	/ _=B  _=L  _=U;

cTakes_n23LowerDia
	cn23LowerDia { attach {to = @B; at = n23LowerS; with = n23LowerM } }
	cnUpperDia { attach {to = @B; at = nUpperS; with = nUpperM } }
	/ _=B  _=L  _=U;

// Upper nuqta attachment

//cTakes_n1hUpperBehSpecialDia
//	cNuqtaLikeUpper { attach {to = @B; at = n1hUpperBehSpecialS; with = nUpperM } }
//	/ _=B  _=U;

cTakes_nUpperDia
	cnUpperDia { attach {to = @B; at = nUpperS; with = nUpperM } }
	/ _=B  _=U;

// Lower nuqta attachment

cTakes_n1LowerDia
	cn1LowerDia { attach {to = @B; at = n1LowerS; with = n1LowerM } }
	/ _=B  _=L;

cTakes_n23LowerDia
	cn23LowerDia { attach {to = @B; at = n23LowerS; with = n23LowerM } }
	/ _=B  _=L;

// Hehhook
cTakes_hehhookDia  g__hehHook_small  { attach {to = @B; at = hehhookS; with = hehhookM } }
	/ _=B  _=H;

// Hehhook - big
////////attachR_BN(	gHehGoalIni,	g__hehHook_big,		default2,		default2_)

endpass;  // 2

endtable;  // pos


#if DO_COL_FIX

/****
table(glyph)

cNuqtas { collision { flags = COLL_OVERLAP; maxoverlap = -300m } };

c_jumpTail = ( cJeemFinals, g_ainfina, g_gainfina );


g_kafExclude = glyphid(1006); // bb.bl = (335, 1719)
g_kaf1Exclude = glyphid(1007);
g_kaf3Exclude = glyphid(1008);
g_kafaltExclude = glyphid(1009);

//g_kafinit2a { collision.exclude.glyph = g_kafExclude };

g_kafmedi1	{ collision.exclude {glyph = g_kaf1Exclude;	offset {x = 400; 	y = 400;}}};
g_kafmedi2	{ collision.exclude {glyph = g_kafExclude;	offset {x = 1100; 	y = 400;}}};
g_kafmedi6	{ collision.exclude {glyph = g_kafExclude;	offset {x = 0;		y = 800;}}};
g_kaffina	{ collision.exclude {glyph = g_kafExclude;	offset {x = 2100;	y = 0;}}};
g_ghafmedishort {collision.exclude {glyph=g_kafExclude;	offset {x = 400;	y = -100;}}};

cls_excludingGlyphs = (g_kafinit2a, g_kafmedi1, g_kafmedi2, g_kafmedi6,	g_ghafmedishort);

cls_excludingGlyphs_kern = (g_kaffina);

endtable;
****/


// Nuqta collision fixing

table(positioning)

pass(3)

// Set up for collision fixing

// Spaces serve as boundaries between collision ranges.
g_space { collision.flags = SET_START_END(collision.flags) };


// Heh-hooks can't move very far, especially vertically.
// TODO: is this right?
g__hehHook_small { collision {
	flags = SET_FIX(collision.flags);
	margin = 100m;
	min.x = -50m;
	min.y = -50m;
	max.x = 50m;
	max.y = 50m;
} };

// The nuqta on the zah (tah form) fits nicely above it, so it is not normally helpful to move it.
cNuqtaLikeUpper { collision {
	flags = SET_FIX(collision.flags);
	margin = 100m;
	min.x = 100m;     // don't let this one move left
	max.x = 100m;
	min.y = -200m;  // shouldn't need to move vertically either, at least by much
	max.y = 300m;
	////maxoverlap = -75m;
} } / cTahMed _ ;

// Nuqtas on initials can be moved quite a bit to the right.
cNuqtaLikeUpper { collision {
	flags = SET_FIX(collision.flags);
	margin = 100m;
	min.x = -250m;
	max.x = 350m; // more than normal
	min.y = -300m;
	max.y = 1000m;
} } / c_initial _;


// Nuqtas above can move more to the left than the right.
cNuqtaLikeUpper { collision {
	flags = SET_FIX(collision.flags);
	margin = 100m;
	min.x = -250m;
	max.x = 200m;
	min.y = -300m;
	//max.y = (position.y > 1000m ? 1000m : 1500m);	
	max.y = 1000m;
}; user2 = position.y; };

// Nuqtas before certain finals can move down quite a bit to jump below swashes.
/**********
cNuqtaLikeBelow { collision {
	flags = SET_FIX(collision.flags);
	margin = 100m;
	marginmin = 40m;
	min.x = -200m;
	max.x = 400m;
	min.y = -1500m; // a lot!
	max.y = 300m;
	maxoverlap = 50m;  // and move to the right if necessary
} } / _  c_jumpTail;
**********/

// Nuqtas below can move more to the right than the left.
cNuqtaLikeLower { collision {
	flags = SET_FIX(collision.flags);
	margin = 100m;
	min.x = -200m;
	max.x = 250m;
	min.y = -1000m;
	max.y = 300m;
} };

// experiment
/*****
cls_excludingGlyphs { collision {
	flags = CLEAR_FIX(collision.flags);
	flags = CLEAR_KERN(collision.flags);
	//exclude.glyph = glyph.collision.exclude.glyph;
	//exclude.offset.x = glyph.collision.exclude.offset.x;
	//exclude.offset.y = glyph.collision.exclude.offset.y;
} };
*****/

// Other bases are not moved.
(c_initial c_medial) { collision { flags = COLL_FREEZE } };

cDiacritic { collision.flags = SET_IGNORE(collision.flags) };	// these have not been attached, so don't bother with them

endpass; // 3

pass(4) { CollisionFix = 3 }
// Actually do the collision fixing. Any failures leave for now.
endpass;

endtable;

#endif // DO_COL_FIX


table(positioning)

//
//	DIACRITIC ATTACHMENT
//

table(glyph)

c_final_wo_diac = c_final;
c_final_wo_diac -= (gWawHamzaAboveFin, gWawHamzaAboveFin_stfh, gAlefMaddaFin, gLamAlefMaddaFin, gAlefHamzaFin, gLamAlefHamzaFin,
	gHehGoalHamzaFin, gHehGoalHamzaFin_stfh, gYehHamzaAboveFin);
	

// many diacritics are attached to initials and medials as if they were nuqtas - but not all
c_base_wo_diac = (c_initial c_medial c_final_wo_diac c_isolated);

c_base_wo_nuqta = (c_initial c_medial);

endtable;  // glyph


// Order of glyphs: base, nuqta below, nuqta above, diacritics below, diacritics above

#if DO_COL_FIX
pass(5)
#else
pass(3)
#endif // DO_COL_FIX


// Attach diacritics.
 
table(glyph) { AttributeOverride = false }
// Classes of nuqtas and things that attach closely like nuqtas:
c_attLikeNqUpper = (cNuqtaUpper); // includes small toa
c_attLikeNqLower = (cNuqtaLower, g__hehHook_small);
endtable;


// attach to nuqta
cTakes_mUpperDia  c_attLikeNqUpper=N  cDiacriticUpper {att {to=@N; at=mUpperS; with=mUpperM}; insert=true}
		/ ^ _  c_attLikeNqLower?  _  cDiacriticLower? _ {att.to==0};
cTakes_mLowerDia  c_attLikeNqLower=N  cDiacriticLower {att {to=@N; at=mLowerS; with=mLowerM}; insert=true}
		/ ^ _  _  c_attLikeNqUpper?  _ {att.to==0};

// Attaching to final form, or nuqta, uses mUpper/LowerS.
cTakes_mUpperDia=B  cDiacriticUpper {att {to=@B; at=mUpperS; with=mUpperM}; insert=true}
		/ ^ _  c_attLikeNqLower?  cDiacriticLower?  _ {att.to==0};
cTakes_mLowerDia=B  cDiacriticLower {att {to=@B; at=mLowerS; with=mLowerM}; insert=true}
		/ ^ _  _ {att.to==0};

// Attaching initial/medial base - uses stationary nuqta APs.
cTakes_nUpperDia=B  cDiacriticUpper {att {to=@B; at=nUpperS; with=mUpperM}; insert=true}
		/ ^ _  c_attLikeNqLower?  cDiacriticLower?  _ {att.to==0};
cTakes_n1LowerDia=B  cDiacriticLower {att {to=@B; at=n1LowerS; with=mLowerM}; insert=true}
		/ ^ _  c_attLikeNqUpper?  _ {att.to==0};

// attach to diacritic
///cDiacriticsAbove=D1  cDiacriticUpper {att {to=@D1; at=mUpperS; with=mUpperM}; insert=true};
///cDiacriticsBelow=D1  cDiacriticLower {att {to=@D1; at=mLowerS; with=mLowerM}; insert=true};

// Remove if we create a nuqta+smalltah glyph:
////c_attLikeNqUpper=N  g__smallTah=T {att {to=@N; at=mUpperS; with=mUpperM} };

endpass; // pos - 5 (or 3)


#if DO_COL_FIX

// Diacritic collision fixing

pass(6)

// Set up diacritic collision fixes and kerning.

// Spaces serve as boundaries between collision ranges.
g_space { collision.flags = COLL_START + COLL_END };

/***
g_takhalus  { collision {
	flags = CLEAR_IGNORE(collision.flags);
	flags = SET_FIX(collision.flags);
	margin = 100m;
	min.x = -400m;
	min.y = -300m;
	max.x = 400m;
	max.y = 800m;
} };
***/

cDiacriticUpper { collision {
	flags = CLEAR_IGNORE(collision.flags);
	flags = SET_FIX(collision.flags);
	margin = 100m;
	min.x = -250m;
	min.y = -300m;
	max.x = 250m;
	max.y = 500m;
} };


cDiacriticLower { collision {
	flags = CLEAR_IGNORE(collision.flags);
	flags = SET_FIX(collision.flags);
	margin = 100m;
	min.x = -250m;
	min.y = -500m;
	max.x = 250m;
	max.y = 300m;
} };

// Also wiggle around nuqtas slightly to make more space if possible.
////cNuqtaLike {collision.margin = 150m};

////cls_excludingGlyphs { collision { flags = CLEAR_FIX(collision.flags); exclude.glyph = 0 }};

// Isolate and final forms can be kerned, as indicated by glyph attribute collision.kern.

cKernable { collision {
	flags = SET_FIX(collision.flags);
	flags = SET_KERN(collision.flags);
	margin = 100m;
	////max.x = 300m; min.x = 0;  // kerning right is logically equivalent to shifting left in RTL
	max.x = 5000m; min.x = -5000m;
    // min/max.y are omitted for kernable glyphs
} };


cNuqtaLike { collision.flags = CLEAR_FIX(collision.flags) };
/////cKernable { collision.flags = CLEAR_FIX(collision.flags) }; - if kerning is done earlier

endpass;

pass(7) { CollisionFix = 4 }

// Perform diacritic-related fixing.

endpass;

/**************
pass(8)

cKernable { collision.flags = CLEAR_FIX(collision.flags) }; // turn off COLL_FIX

cNuqtaLike { collision {
	flags = SET_FIX(collision.flags);
	margin = 100m;
} };

cDiacritics { collision {
	flags = SET_FIX(collision.flags);
	margin = 125m;
} };

endpass;


pass(9) { CollisionFix = 2 }

// Last chance fixes.

endpass;

***************/


#endif // DO_COL_FIX


/////#include "awami_tweaks.gdh"

endtable;
