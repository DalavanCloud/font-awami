/*
    File: nastaliq_rules.gdl

    Graphite rules for Awami Nastaliq
*/

// Standard definitions and abbreviations:
#include "stddef.gdh"

// Collision fixing:
#define DO_COL_FIX 1

// Separate the nuqtas on final glyphs from their bases: 
#define SEP_FINAL_NUQTAS 0

// just for testing the end of the compilation process; doesn't generate a workable font
#define QUICKCOMPILE 0

Bidi = true;
ScriptDirection = HORIZONTAL_RIGHT_TO_LEFT;


#if DO_COL_FIX

#define COLL_FREEZE       0		// base - test for collisions but don't move this glyph; 
                           		// the default for a glyph in the START-END range
#define COLL_FIX          1
#define COLL_IGNORE       2
#define COLL_START        4
#define COLL_END          8
#define COLL_KERN        16
//      COLL_ISCOL       32		// this glyph has a collision
//      COLL_KNOWN       64		// we've figured out what's happening with this glyph
#define COLL_ISSPACE    128		// treat this glyph as a space for the purposes of kerning
////#define COLL_JUMPABLE   128 -- obsolete
////#define COLL_OVERLAP    256 -- obsolete

#define setbits(f,m,v) (f & (~m)) | v


#define SET_FIX(f) 			setbits(f, COLL_FIX, COLL_FIX)
#define CLEAR_FIX(f) 		setbits(f, COLL_FIX, 0)
#define SET_IGNORE(f)		setbits(f, COLL_IGNORE, COLL_IGNORE)
#define CLEAR_IGNORE(f)		setbits(f, COLL_IGNORE, 0)
#define SET_START(f)		setbits(f, COLL_START, COLL_START)
#define CLEAR_START(f)		setbits(f, COLL_START, 0)
#define SET_END(f)			setbits(f, COLL_END, COLL_END)
#define CLEAR_END(f)		setbits(f, COLL_END, 0)
#define SET_KERN(f)			setbits(f, COLL_KERN, COLL_KERN)
#define CLEAR_KERN(f)		setbits(f, COLL_KERN, 0)
#define SET_ISSPACE(f)		setbits(f, COLL_ISSPACE, COLL_ISSPACE)
#define CLEAR_ISSPACE(f)	setbits(f, COLL_ISSPACE, 0)

#define SET_START_END(f)	setbits(f, (COLL_START + COLL_END), (COLL_START + COLL_END))

#define ORDER_LEFTDOWN	1
#define ORDER_RIGHTUP	2
#define ORDER_NOABOVE	4
#define ORDER_NOBELOW	8

#define AUTOKERN_NONE		0
#define AUTOKERN_FULL		1
#define AUTOKERN_NOSPACE	2

#endif // DO_COL_FIX

// Nuqtas that are attached below a bariyeh:
#define underBy user1


// TEMPORARY

table(glyph) {AttributeOverride = 1};

/**
g__gafStroke {gafStrokeM = point(1370m, 1750m) };
g__gafStroke_short {gafStrokeM = point(1370m, 1720m) };

gKafIni { gafStrokeS = point(170m, 1340m) };
gKafIniLm { gafStrokeS = point(160m, 2060m) };
**/

/**
// These adjustments lower the beh/yeh nuqtas before final noon and qaf.
// Sheldon says they don't want them.

gBehIniQf { n1LowerS = point(333m, 81m); n23LowerS = point(417m, 81m) };
gBehMedQf { n1LowerS = point(383m, 84m); n23LowerS = point(462m, 84m) };
gBehMedQf_ss { n1LowerS = point(262m, 67m); n23LowerS = point(356m, 67m) };

gBehIniNn { n1LowerS = point(282m, 295m); n23LowerS = point(427m, 170m) };
gBehMedNn { n1LowerS = point(401m, 155m); n23LowerS = point(423m, 165m) };
gBehMedNn_ss { n1LowerS = point(401m, 155m); n23LowerS = point(423m, 165m) };
**/

endtable;


#include "nastaliq_classes.gdh"
#include "latin_awami.gdh"


#if DO_COL_FIX

#include "nastaliq_complexShapes.gdh"

#endif // DO_COL_FIX


// FEATURES

table(feature)

// Heh-goal hook on medial
hehGoalHook {
	id = "hehk";
	name.1033 = string("Hook on medial heh goal");
	default = 1;
    settings {
        ffalse {
            value = 0;
            name.1033 = string("False");
        }
        ftrue {
            value = 1;
            name.1033 = string("True");
        }
    }
}

// Heh-doachashmee initial
hehDoachIni {
	id = "hedo";
	name.1033 = string("Initial heh doachashmee");
	default = 0;
    settings {
        heart {
            value = 0;
            name.1033 = string("Heart shape");
        }
        round {
            value = 1;
            name.1033 = string("Round");
        }
    }
}

fullStopAlt {
	id = "cv85";
	name.1033 = string("Full stop");
	settings {
		fullStopDash {
			value = 0;
			name.1033 = string("Dash");
		}
		fullStopDot {
			value = 1;
			name.1033 = string("Dot");
		}
	}
	default = fullStopDash;
}

punctAlt {
	id = "punc";
	name.1033 = string("Punctuation");
	settings {
		punctDefault {
			value = 0;
			name.1033 = string("Default");
		}
		punctArabic {
			value = 1;
			name.1033 = string("Arabic");
		}
		punctLatin {
			value = 2;
			name.1033 = string("Latin");
		}
	}
	default = 0;
}

sukunAlt {
    id = "cv78";
    name.1033 = string("Sukun/jazm");
    settings {
        jazmDown {
            value = 1;
            name.1033 = string("Open down");
        }
        jazmLeft {
            value = 2;
            name.1033 = string("Open left");
        }
    }
    default = jazmDown;
}

hamzaAlt {
    id = "hamz";
    name.1033 = string("Hamza");
    settings {
        ffalse {
            value = 0;
            name.1033 = string("Urdu style");
        }
        ftrue {
            value = 1;
            name.1033 = string("Arabic style");
        }
    }
    default = 0;
}

lamValt {
    id = "lamv";
    name.1033 = string("Lam with V");
    settings {
        ffalse {
            value = 0;
            name.1033 = string("V over stem");
        }
        ftrue {
            value = 1;
            name.1033 = string("V over bowl");
        }
    }
    default = 0;
}


/***
maddaAlt {
    id = "madd";
    name.1033 = string("Madda");
    settings {
        belowVowel {
            value = 0;
            name.1033 = string("Below vowel mark");
        }
        aboveVowel {
            value = 1;
            name.1033 = string("Above vowel mark");
        }
    }
    default = belowVowel;
}
***

// Overlap kerning
/***********
overlapKern {
	id = "olap";
	name.1033 = string("Overlap kerning");
	default = 2;
	settings {
        none {
            value = 0;
            name.1033 = string("None");
        }
		wide {
			value = 1;
			name.1033 = string("Wide");
		}
        medium {
            value = 2;
            name.1033 = string("Medium");
        }
        tight {
            value = 3;
            name.1033 = string("Tight");
        }
    }
}
**********/

wordSpacing {
	id = "wdsp";	// word spacing
	name.1033 = string("Word spacing");
	default = 2;
	settings {
		xtight {
			value = 0;
			name.1033 = string("Extra tight");
		}
		tight {
			value = 1;
			name.1033 = string("Tight");
		}
		medium {
			value = 2;
			name.1033 = string("Medium");
		}
		wide {
			value = 3;
			name.1033 = string("Wide");
		}
		xwide {
			value = 4;
			name.1033 = string("Extra wide");
		}
	}
}

shortForms {
	id = "shrt";
	name.1033 = string("Short forms");
	default = 0;
    settings {
        none {
            value = 0;
            name.1033 = string("None");
        }
        kaf {
            value = 1;
            name.1033 = string("Kafs and gafs");
        }
        finals {
            value = 2;
            name.1033 = string("Finals");
        }
        all {
            value = 3;
            name.1033 = string("All");
        }
    }
}

smallNuqtas {
	id = "snuq";
	name.1033 = string("Small nuqtas");
	default = 0;
    settings {
        ffalse {
            value = 0;
            name.1033 = string("Off");
        }
        ftrue {
            value = 1;
            name.1033 = string("On");
        }
    }
}

collFix {
	id = "agca";  // automatic glyph collision avoidance
	name.1033 = string("Collision avoidance");
	default = 3;
    settings {
        none {
            value = 0;
            name.1033 = string("Off");
        }
        kernonly {
            value = 1;
            name.1033 = string("Kern only");
        }
        all {
            value = 3;
            name.1033 = string("On");
        }
    }
}

showInvis {
	id = "invs";
	name.1033 = string("Show invisible characters");	
	default = 0;
    settings {
        ffalse {
            value = 0;
            name.1033 = string("False");
        }
        ftrue {
            value = 1;
            name.1033 = string("True");
        }
    }
}

/***
debugGaf {
	id = "dbgf";
	name.1033 = string("Gaf stroke");	
	default = 1;
    settings {
        ffalse {
            value = 0;
            name.1033 = string("Composed");
        }
        ftrue {
            value = 1;
            name.1033 = string("Decomposed");
        }
    }
}
***/

endtable; // feature



///#define DIACS [[cDiacritic cDiacritic?]? cDiacritic]?

#define DIACS [cPostNuqta1 cPostNuqta2?]?

// TODO: include diacritic combinations
#define MARKS  cNuqtaLike?  DIACS

// In positioning table, allow two nuqta-like glyphs for some glyphs that can have
// nuqtas both above and below
#define MARKS2N  cNuqtaLikeFirst? cNuqtaLikeSecond?  DIACS


// SUBSTITUTION RULES

#include "nastaliq_shaping.gdh"


// POSITIONING RULES

#include "nastaliq_positioning.gdh"

