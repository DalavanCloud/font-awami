/*
    File: nastaliq_shaping.gdl

    Graphite substitution rules for Awami Nastaliq
*/

table(substitution)


// Debugging

pass(1)

table(glyph)

cSpace = (g_space g_spaceVis g_spaceVisXtight g_spaceVisTight g_spaceVisXwide g_spaceVisWide);

cNoJoin = (cSpace g_zeronojoin);

cInvisible = (g_leftToRightEmbedding  g_rightToLeftEmbedding  g_popDirectionalFormatting  g_leftToRightOverride
	g_rightToLeftOverride  g_inhibitArabicFormShaping  g_activateArabicFormShaping g_leftToRightIsolate
	g_rightToLeftIsolate  g_firstStrongIsolate  g_popDirectionalIsolate);

endtable;


if (showInvis == 1 && wordSpacing == xtight)
g_space  >  g_spaceVisXtight;
endif;

if (showInvis == 1 && wordSpacing == tight)
g_space  >  g_spaceVisTight;
endif;

if (showInvis == 1 && wordSpacing == medium)
g_space  >  g_spaceVis;
endif;

if (showInvis == 1 && wordSpacing == wide)
g_space  >  g_spaceVisWide;
endif;

if (showInvis == 1 && wordSpacing == xwide)
g_space  >  g_spaceVisXwide;
endif;

if (showInvis == 0)
cInvisible  >  g_zeroWidthNoBreakSpace;
endif;

endpass;



//
//	BASIC CONTEXTUAL SHAPING - generate initial, medial, and final forms
//


pass(1)

//if (maddaAlt == belowVowel)
//	gMaddaAbove  >  gMaddaAbove_low  /  ^ _;
//endif;

	// Diacritic ordering
	// Lower diacritics go first, in order of their mark class, then upper diacritics,
	// in order of their mark class.
	// We don't swap the glyphs, because that would mess up the original order,
	// rather we delete and insert.
	// (We move the position back before the first diacritic to allow the 
	// combining rules below to fire. This shouldn't be a problem because they
	// should never match a second time.)
	
	_  cMark1l  >  @M:M  _  / ^ _ cMark2l_1234u cMark2l_1234u? _=M;
	_  cMark2l  >  @M:M  _  / ^ _ cMark1234u    cMark1234u?    _=M;
	_  cMark1u  >  @M:M  _  / ^ _ cMark234u     cMark234u?     _=M;
	_  cMark2u  >  @M:M  _  / ^ _ cMark34       cMark34?       _=M;
	_  cMark3   >  @M:M  _  / ^ _ cMark4        cMark4?        _=M;

	// Combine certain diacritics into single glyphs.
	gShadda      cPostShadda      >  cShaddaPlus$3:(1 3)      _  /  _  cMark34? _;
	gKharizabar  cPostKharizabar  >  cKharizabarPlus$3:(1 3)  _  /  _  cMark34? _;

	// NFD -> NFC
	////gAlef  gMaddaAbove  >  gAlefMaddaAbove:(1 2)  _  /  ^ _  _;
	(gYeh  gChotiyeh)  gHamzaAbove  >  gYehHamzaAbove:(1 2) _ /  ^ _  _;

	// Yay + hamza = hamzayay (move zair or zabar up out of the way):
	gChotiyeh=Y  cDiacritic=D  gHamzaAbove=H  >  @Y  @H  @D  /  ^ [(cDualLinkIso cDualLinkFin) DIACS]?  _  _  _;

//if (maddaAlt == 0)
//	gAlefMaddaAbove  cDiacriticUpper  _  >  gAlef:1  gMaddaAbove_low:1  @2:2;
//else
	gAlefMaddaAbove  cDiacriticUpper  _  >  gAlef:1  @2:2  gMaddaAbove:1;
//endif;

	// NFD -> NFC: combine hamzas on chotiyeh, heh-goal
	(cDualLinkFin cRightLinkFin cDualLinkIso cRightLinkIso)
        c_nfd_noHamza=B  gHamzaAbove=H  >  @1  c_nfc_hamza:(B H)  _  /  ^ _  DIACS  _  _;
    c_nfd_noHamza=B  gHamzaAbove=H  >  c_nfc_hamza:(B H)  _  /  ^ _  _;

	// Separate nuqtas and similar bits from bases.

#include "nastaliq_separateNuqtas.gdh"

endpass;


pass(2)

	// Delete superfluous ZWJ:
	cDualLinkIso  g_zerojoin  cDualLinkIso   >  cDualLinkIni_raw:(B1 ZWJ)  _  cDualLinkFin   /  _=B1 ^ MARKS  _=ZWJ  _ ;
	cDualLinkIso  g_zerojoin  cRightLinkIso  >  cDualLinkIni_raw:(B1 ZWJ)  _  cRightLinkFin  /  _=B1 ^ MARKS  _=ZWJ  _ ;
	cDualLinkFin  g_zerojoin  cDualLinkIso   >  cDualLinkMed_raw:(B1 ZWJ)  _  cDualLinkFin   /  _=B1 ^ MARKS  _=ZWJ  _ ;
	cDualLinkFin  g_zerojoin  cRightLinkIso  >  cDualLinkMed_raw:(B1 ZWJ)  _  cRightLinkFin  /  _=B1 ^ MARKS  _=ZWJ  _ ;

	// Create basic contextual forms. 
	
	cDualLinkIso  cDualLinkIso   >  cDualLinkIni_raw  cDualLinkFin   /  _ ^ MARKS  _ ;
	
	cDualLinkIso  cRightLinkIso  >  cDualLinkIni_raw  cRightLinkFin  /  _ ^ MARKS  _ ;
		
	cDualLinkFin  cDualLinkIso   >  cDualLinkMed_raw  cDualLinkFin   /  _ ^ MARKS  _ ;
	
	cDualLinkFin  cRightLinkIso  >  cDualLinkMed_raw  cRightLinkFin  /  _ ^ MARKS _ ;

endpass; // 1


// nuqta slot attribute:
// TODO: remove when we get rid of STRIP_NUQTAS
#define nuqtaS user1

pass(2)
	// Special finals

	// FIX THIS:
	///gBariyehHamzaFin0  _  >  gBehMedBy {nuqtaS = nuqtaG}  gBariyehFin:1;

	// illegal - no these are legal!
	//gYehHamzaAboveFin  _  >  gBehMed {nuqtaS = nuqtaG}  circledash:1  /  c_medial  _  _;
	//gYehHamzaAboveFin  _  >  gBehIni {nuqtaS = nuqtaG}  circledash:1;

endpass;	// 2


//
//	FURTHER CONTEXTUAL SHAPING
//

table(glyph)

cMed_raw = (gBehMed_raw, gBehMed_SS_raw, gJeemMed_raw, gSeenMed_raw, gSadMed_raw, gTahMed_raw,
		gAinMed_raw, gFehMed_raw, gKafMed_raw, gGafMed_raw, gLamMed_raw, gMeemMed_raw,
		gHehGoalMed_raw, gHehDoMed_raw);

cMed_raw_any = (cMed_raw, gMeemMed_alt_raw);


// Note: these all have an extra beh form to account for the _SS alternate.
cMed = (gBehMed, gBehMed, gJeemMed, gSeenMed, gSadMed, gTahMed, gAinMed, gFehMed,
		gKafMed, gGafMed, gLamMed, gMeemMed, gHehGoalMed, gHehDoMed);
cMedBeF = (gBehMedBeF, gBehMedBeF_ss, gJeemMedBeF, gSeenMedBeF, gSadMedBeF, gTahMedBeF, gAinMedBeF, gFehMedBeF,
		gKafMedBeF, gGafMedBeF, gLamMedBeF, gMeemMedBeF, gHehGoalMedBeF, gHehDoMedBeF);
cMedJm = (gBehMedJm, gBehMedJm, gJeemMedJm, gSeenMedJm, gSadMedJm, gTahMedJm, gAinMedJm, gFehMedJm,
		gKafMedJm, gGafMedJm, gLamMedJm, gMeemMedJm, gHehGoalMedJm, gHehDoMedJm);
cMedRe = (gBehMedRe, gBehMedRe, gJeemMedRe, gSeenMedRe, gSadMedRe, gTahMedRe, gAinMedRe, gFehMedRe,
		gKafMedRe, gGafMedRe, gLamMedRe, gMeemMedRe, gHehGoalMedRe, gHehDoMedRe);
cMedSn = (gBehMedSn, gBehMedSn, gJeemMedSn, gSeenMedSn, gSadMedSn, gTahMedSn, gAinMedSn, gFehMedSn,
		gKafMedSn, gGafMedSn, gLamMedSn, gMeemMedSn, gHehGoalMedSn, gHehDoMedSn);
cMedSd = (gBehMedSd, gBehMedSd_ss, gJeemMedSd, gSeenMedSd, gSadMedSd, gTahMedSd, gAinMedSd, gFehMedSd,
		gKafMedSd, gGafMedSd, gLamMedSd, gMeemMedSd, gHehGoalMedSd, gHehDoMedSd);
cMedSd_kx = (gBehMedSd, gBehMedSd_ss, gJeemMedSd, gSeenMedSd, gSadMedSd, gTahMedSd, gAinMedSd, gFehMedSd,
		gKafMedSd_alt, gGafMedSd_alt, gLamMedSd, gMeemMedSd, gHehGoalMedSd, gHehDoMedSd);
cMedTaF = (gBehMedTaF, gBehMedTaF_ss, gJeemMedTaF, gSeenMedTaF, gSadMedTaF, gTahMedTaF, gAinMedTaF, gFehMedTaF,
		gKafMedTaF, gGafMedTaF, gLamMedTaF, gMeemMedTaF, gHehGoalMedTaF, gHehDoMedTaF);
cMedTaM = (gBehMedTaM, gBehMedTaM_ss, gJeemMedTaM, gSeenMedTaM, gSadMedTaM, gTahMedTaM, gAinMedTaM, gFehMedTaM,
		gKafMedTaM, gGafMedTaM, gLamMedTaM, gMeemMedTaM, gHehGoalMedTaM, gHehDoMedTaM);
cMedTaM_kx = (gBehMedTaM, gBehMedTaM_ss, gJeemMedTaM, gSeenMedTaM, gSadMedTaM, gTahMedTaM, gAinMedTaM, gFehMedTaM,
		gKafMedTaM_alt, gGafMedTaM_alt, gLamMedTaM, gMeemMedTaM, gHehGoalMedTaM, gHehDoMedTaM);
cMedAi = (gBehMedAi, gBehMedAi_ss, gJeemMedAi, gSeenMedAi, gSadMedAi, gTahMedAi, gAinMedAi, gFehMedAi,
		gKafMedAi, gGafMedAi, gLamMedAi, gMeemMedAi, gHehGoalMedAi, gHehDoMedAi);
cMedFe = (gBehMedFe, gBehMedFe_ss, gJeemMedFe, gSeenMedFe, gSadMedFe, gTahMedFe, gAinMedFe, gFehMedFe,
		gKafMedFe, gGafMedFe, gLamMedFe, gMeemMedFe, gHehGoalMedFe, gHehDoMedFe);
cMedQf = (gBehMedQf, gBehMedQf_ss, gJeemMedQf, gSeenMedQf, gSadMedQf, gTahMedQf, gAinMedQf, gFehMedQf,
		gKafMedQf, gGafMedQf, gLamMedQf, gMeemMedQf, gHehGoalMedQf, gHehDoMedQf);
cMedMm = (gBehMedMm, gBehMedMm, gJeemMedMm, gSeenMedMm, gSadMedMm, gTahMedMm, gAinMedMm, gFehMedMm,
		gKafMedMm, gGafMedMm, gLamMedMm, gMeemMedMm, gHehGoalMedMm, gHehDoMedMm);
cMedNn = (gBehMedNn, gBehMedNn, gJeemMedNn, gSeenMedNn, gSadMedNn, gTahMedNn, gAinMedNn, gFehMedNn,
		gKafMedNn, gGafMedNn, gLamMedNn, gMeemMedNn, gHehGoalMedNn, gHehDoMedNn);
cMedHgF = (gBehMedHgF, gBehMedHgF, gJeemMedHgF, gSeenMedHgF, gSadMedHgF, gTahMedHgF, gAinMedHgF, gFehMedHgF,
		gKafMedHgF, gGafMedHgF, gLamMedHgF, gMeemMedHgF, gHehGoalMedHgF, gHehDoMedHgF);
cMedHgM = (gBehMedHgM, gBehMedHgM, gJeemMedHgM, gSeenMedHgM, gSadMedHgM, gTahMedHgM, gAinMedHgM, gFehMedHgM,
		gKafMedHgM, gGafMedHgM, gLamMedHgM, gMeemMedHgM, gHehGoalMedHgM, gHehDoMedHgM);
cMedHd = (gBehMedHd, gBehMedHd, gJeemMedHd, gSeenMedHd, gSadMedHd, gTahMedHd, gAinMedHd, gFehMedHd,
		gKafMedHd, gGafMedHd, gLamMedHd, gMeemMedHd, gHehGoalMedHd, gHehDoMedHd);
cMedCh = (gBehMedCh, gBehMedCh, gJeemMedCh, gSeenMedCh, gSadMedCh, gTahMedCh, gAinMedCh, gFehMedCh,
		gKafMedCh, gGafMedCh, gLamMedCh, gMeemMedCh, gHehGoalMedCh, gHehDoMedCh);
cMedBy = (gBehMedBy, gBehMedBy, gJeemMedBy, gSeenMedBy, gSadMedBy, gTahMedBy, gAinMedBy, gFehMedBy,
		gKafMedBy, gGafMedBy, gLamMedBy, gMeemMedBy, gHehGoalMedBy, gHehDoMedBy);
cMedBe = (gBehMedBe, gBehMedBe, gJeemMedBe, gSeenMedBe, gSadMedBe, gTahMedBe, gAinMedBe, gFehMedBe,
		gKafMedBe, gGafMedBe, gLamMedBe, gMeemMedBe, gHehGoalMedBe, gHehDoMedBe);
cMedBe_kx = (gBehMedBe, gBehMedBe, gJeemMedBe, gSeenMedBe, gSadMedBe, gTahMedBe, gAinMedBe, gFehMedBe,
		gKafMedBe_alt, gGafMedBe_alt, gLamMedBe, gMeemMedBe, gHehGoalMedBe, gHehDoMedBe);
cMedBeRe = (gBehMedBeRe, gBehMedBeRe, gJeemMedBeRe, gSeenMedBeRe, gSadMedBeRe, gTahMedBeRe, gAinMedBeRe, gFehMedBeRe,
		gKafMedBeRe, gGafMedBeRe, gLamMedBeRe, gMeemMedBeRe, gHehGoalMedBeRe, gHehDoMedBeRe);
cMedBeNn = (gBehMedBeNn, gBehMedBeNn, gJeemMedBeNn, gSeenMedBeNn, gSadMedBeNn, gTahMedBeNn, gAinMedBeNn, gFehMedBeNn,
		gKafMedBeNn, gGafMedBeNn, gLamMedBeNn, gMeemMedBeNn, gHehGoalMedBeNn, gHehDoMedBeNn);
cMedBeHg = (gBehMedBeHg, gBehMedBeHg, gJeemMedBeHg, gSeenMedBeHg, gSadMedBeHg, gTahMedBeHg, gAinMedBeHg, gFehMedBeHg,
		gKafMedBeHg, gGafMedBeHg, gLamMedBeHg, gMeemMedBeHg, gHehGoalMedBeHg, gHehDoMedBeHg);
// TODO: if necessary, add back cMedBeRe_kx, cMedBeNn_kx, cMedBeHg_kx

// NOTE gLamMedMm in this class:
cMedMmX = (gBehMedMmX, gBehMedMmX, gJeemMedMmX, gSeenMedMmX, gSadMedMmX, gTahMedMmX, gAinMedMmX, gFehMedMmX,
		gKafMedMmX, gGafMedMmX, gLamMedMm, gMeemMedMmX, gHehGoalMedMmX, gHehDoMedMmX);
cMedKfX_kx = (gBehMedKfX, gBehMedKfX, gJeemMedKfX, gSeenMedKfX, gSadMedKfX, gTahMedKfX, gAinMedKfX, gFehMedKfX,
		gKafMedKfX, gGafMedKfX, gLamMedKfX, gMeemMedKfX, gHehGoalMedKfX, gHehDoMedKfX);

// Note: these include an extra beh form to account for the _SS alternate
cMedBeM1 = (gBehMedBeM1, gBehMedBeM1, gJeemMedBeM1, gSeenMedBeM1, gSadMedBeM1, gTahMedBeM1, gAinMedBeM1, gFehMedBeM1,
		gKafMedBeM1, gGafMedBeM1, gLamMedBeM1, gMeemMedBeM1, gHehGoalMedBeM1, gHehDoMedBeM1);
cMedBeM2 = (gBehMedBeM2, gBehMedBeM2, gJeemMedBeM2, gSeenMedBeM2, gSadMedBeM2, gTahMedBeM2, gAinMedBeM2, gFehMedBeM2,
		gKafMedBeM2, gGafMedBeM2, gLamMedBeM2, gMeemMedBeM2, gHehGoalMedBeM2, gHehDoMedBeM2);

//--cMed_noS = (gBehMed, gJeemMed, gTahMed, gAinMed, gFehMed,
//--		gKafMed, gGafMed, gLamMed, gMeemMed, gHehGoalMed, gHehDoMed);
cMed_raw_noS = (gBehMed_raw, gJeemMed_raw, gTahMed_raw, gAinMed_raw, gFehMed_raw,
		gKafMed_raw, gGafMed_raw, gLamMed_raw, gMeemMed_raw, gHehGoalMed_raw, gHehDoMed_raw);
cMedBeM1_noS = (gBehMedBeM1, gJeemMedBeM1, gTahMedBeM1, gAinMedBeM1, gFehMedBeM1,
		gKafMedBeM1, gGafMedBeM1, gLamMedBeM1, gMeemMedBeM1, gHehGoalMedBeM1, gHehDoMedBeM1);
cMedBeM1_noS_kx = (gBehMedBeM1, gJeemMedBeM1, gTahMedBeM1, gAinMedBeM1, gFehMedBeM1,
		gKafMedBeM1_alt, gGafMedBeM1_alt, gLamMedBeM1, gMeemMedBeM1, gHehGoalMedBeM1, gHehDoMedBeM1);
/*** not used:
cMedBe_noS = (gBehMedBe, gJeemMedBe, gTahMedBe, gAinMedBe, gFehMedBe,
		gKafMedBe, gGafMedBe, gLamMedBe, gMeemMedBe, gHehGoalMedBe, gHehDoMedBe);
cMedBe_noS_kx = (gBehMedBe, gJeemMedBe, gTahMedBe, gAinMedBe, gFehMedBe,
		gKafMedBe_alt, gGafMedBe_alt, gLamMedBe, gMeemMedBe, gHehGoalMedBe, gHehDoMedBe);
***/
	
cMed_KG_DK = (gBehMed, gJeemMed, gSeenMed, gSadMed, gTahMed, gAinMed, gFehMed,
		gKafMedDk, gGafMedDk, gLamMed, gMeemMed, gHehGoalMed, gHehDoMed);
		


cBehMed_postBeM = (gBehMedBeF, gBehMedJm, gBehMedSd, gBehMedTaF, gBehMedTaM, gBehMedAi, gBehMedFe,
		gBehMedQf, gBehMedMm, gBehMedHgM, gBehMedHd, gBehMedCh, gBehMedBy, gBehMedMmX,
		gBehMedKfX);	// gBehMedKfX not included in Caltmedialtkaf23, but it is in Caltmedi23
		
cBehMed_postSBe = (gBehMedJm, gBehMedMm, gBehMedHgM, gBehMedHd, gBehMedCh,
		gBehMedBy, gBehMedMmX, gBehMedKfX);
		
cBehMed_postSmedBeM1 = (gBehMedBeM2, gBehMedBe, gBehMedSn, gBehMedBeF_ss, gBehMedSd_ss, gBehMedTaF_ss,
		gBehMedTaM_ss, gBehMedAi_ss, gBehMedFe_ss, gBehMedQf_ss, gBehMedBeHg,
		gBehMedHgF_be, gBehMedBeRe);
cBehMed_postSiniBeM1 = (gBehMedBeM2, gBehMedBe, gBehMedSn, gBehMedBeF_ss, gBehMedSd_ss, gBehMedTaF_ss, 
		gBehMedTaM_ss, gBehMedAi_ss, gBehMedFe_ss, gBehMedQf_ss, gBehMedBeHg);

//cJeemMed1a_KfX? = glyphid(492..516);
		
cIni_raw = (gBehIni_raw, gJeemIni_raw, gSeenIni_raw, gSadIni_raw, gTahIni_raw, gAinIni_raw, gFehIni_raw,
		gKafIni_raw, gGafIni_raw, gLamIni_raw, gMeemIni_raw, gHehGoalIni_raw, gHehDoIni_raw);

cIni = (gBehIni, gJeemIni, gSeenIni, gSadIni, gTahIni, gAinIni, gFehIni,
		gKafIni, gGafIni, gLamIni, gMeemIni, gHehGoalIni, gHehDoIni);
cIniBe = (gBehIniBe, gJeemIniBe, gSeenIniBe, gSadIniBe, gTahIniBe, gAinIniBe, gFehIniBe,
		gKafIniBe, gGafIniBe, gLamIniBe, gMeemIniBe, gHehGoalIniBe, gHehDoIniBe);
cIniBeM1 = (gBehIniBeM1, gJeemIniBeM1, gSeenIniBeM1, gSadIniBeM1, gTahIniBeM1, gAinIniBeM1, gFehIniBeM1,
		gKafIniBeM1, gGafIniBeM1, gLamIniBeM1, gMeemIniBeM1, gHehGoalIniBeM1, gHehDoIniBeM1);
cIniBeM1_kx = (gBehIniBeM1, gJeemIniBeM1, gSeenIniBeM1, gSadIniBeM1, gTahIniBeM1, gAinIniBeM1, gFehIniBeM1,
		gKafIniBeM1_alt, gGafIniBeM1_alt, gLamIniBeM1, gMeemIniBeM1, gHehGoalIniBeM1, gHehDoIniBeM1);
cIniBeM2 = (gBehIniBeM2, gJeemIniBeM2, gSeenIniBeM2, gSadIniBeM2, gTahIniBeM2, gAinIniBeM2, gFehIniBeM2,
		gKafIniBeM2, gGafIniBeM2, gLamIniBeM2, gMeemIniBeM2, gHehGoalIniBeM2, gHehDoIniBeM2);
cIniBeM2_kx = (gBehIniBeM2, gJeemIniBeM2, gSeenIniBeM2, gSadIniBeM2, gTahIniBeM2, gAinIniBeM2, gFehIniBeM2,
		gKafIniBeM2_alt, gGafIniBeM2_alt, gLamIniBeM2, gMeemIniBeM2, gHehGoalIniBeM2, gHehDoIniBeM2);
cIniBeM2F = (gBehIniBeM2, gJeemIniBeF, gSeenIniBeF, gSadIniBeF, gTahIniBeF, gAinIniBeF, gFehIniBeM2,
		gKafIniBeM2, gGafIniBeM2, gLamIniBeM2, gMeemIniBeF, gHehGoalIniBeF, gHehDoIniBeF);
cIniJm = (gBehIniJm, gJeemIniJm, gSeenIniJm, gSadIniJm, gTahIniJm, gAinIniJm, gFehIniJm,
		gKafIniJm, gGafIniJm, gLamIniJm, gMeemIniJm, gHehGoalIniJm, gHehDoIniJm);
cIniRe = (gBehIniRe, gJeemIniRe, gSeenIniRe, gSadIniRe, gTahIniRe, gAinIniRe, gFehIniRe,
		gKafIniRe, gGafIniRe, gLamIniRe, gMeemIniRe, gHehGoalIniRe, gHehDoIniRe);
cIniSn = (gBehIniSn, gJeemIniSn, gSeenIniSn, gSadIniSn, gTahIniSn, gAinIniSn, gFehIniSn,
		gKafIniSn, gGafIniSn, gLamIniSn, gMeemIniSn, gHehGoalIniSn, gHehDoIniSn);
cIniSd = (gBehIniSd, gJeemIniSd, gSeenIniSd, gSadIniSd, gTahIniSd, gAinIniSd, gFehIniSd,
		gKafIniSd, gGafIniSd, gLamIniSd, gMeemIniSd, gHehGoalIniSd, gHehDoIniSd);
cIniSd_kx = (gBehIniSd, gJeemIniSd, gSeenIniSd, gSadIniSd, gTahIniSd, gAinIniSd, gFehIniSd,
		gKafIniSd_alt, gGafIniSd_alt, gLamIniSd, gMeemIniSd, gHehGoalIniSd, gHehDoIniSd);
cIniTaF = (gBehIniTaF, gJeemIniTaF, gSeenIniTaF, gSadIniTaF, gTahIniTaF, gAinIniTaF, gFehIniTaF,
		gKafIniTaF, gGafIniTaF, gLamIniTaF, gMeemIniTaF, gHehGoalIniTaF, gHehDoIniTaF);
cIniTaM = (gBehIniTaM, gJeemIniTaM, gSeenIniTaM, gSadIniTaM, gTahIniTaM, gAinIniTaM, gFehIniTaM,
		gKafIniTaM, gGafIniTaM, gLamIniTaM, gMeemIniTaM, gHehGoalIniTaM, gHehDoIniTaM);
cIniAi = (gBehIniAi, gJeemIniAi, gSeenIniAi, gSadIniAi, gTahIniAi, gAinIniAi, gFehIniAi,
		gKafIniAi, gGafIniAi, gLamIniAi, gMeemIniAi, gHehGoalIniAi, gHehDoIniAi);
cIniFe = (gBehIniFe, gJeemIniFe, gSeenIniFe, gSadIniFe, gTahIniFe, gAinIniFe, gFehIniFe,
		gKafIniFe, gGafIniFe, gLamIniFe, gMeemIniFe, gHehGoalIniFe, gHehDoIniFe);					
cIniQf = (gBehIniQf, gJeemIniQf, gSeenIniQf, gSadIniQf, gTahIniQf, gAinIniQf, gFehIniQf,
		gKafIniQf, gGafIniQf, gLamIniQf, gMeemIniQf, gHehGoalIniQf, gHehDoIniQf);
cIniMm = (gBehIniMm, gJeemIniMm, gSeenIniMm, gSadIniMm, gTahIniMm, gAinIniMm, gFehIniMm,
		gKafIniMm, gGafIniMm, gLamIniMm, gMeemIniMm, gHehGoalIniMm, gHehDoIniMm);
cIniNn = (gBehIniNn, gJeemIniNn, gSeenIniNn, gSadIniNn, gTahIniNn, gAinIniNn, gFehIniNn,
		gKafIniNn, gGafIniNn, gLamIniNn, gMeemIniNn, gHehGoalIniNn, gHehDoIniNn);
cIniHgF = (gBehIniHgF, gJeemIniHgF, gSeenIniHgF, gSadIniHgF, gTahIniHgF, gAinIniHgF, gFehIniHgF,
		gKafIniHgF, gGafIniHgF, gLamIniHgF, gMeemIniHgF, gHehGoalIniHgF, gHehDoIniHgF);
cIniHgM = (gBehIniHgM, gJeemIniHgM, gSeenIniHgM, gSadIniHgM, gTahIniHgM, gAinIniHgM, gFehIniHgM,
		gKafIniHgM, gGafIniHgM, gLamIniHgM, gMeemIniHgM, gHehGoalIniHgM, gHehDoIniHgM);
cIniHgM_kx = (gBehIniHgM, gJeemIniHgM, gSeenIniHgM, gSadIniHgM, gTahIniHgM, gAinIniHgM, gFehIniHgM,
		gKafIniHgM_alt, gGafIniHgM_alt, gLamIniHgM, gMeemIniHgM, gHehGoalIniHgM, gHehDoIniHgM);
cIniHd = (gBehIniHd, gJeemIniHd, gSeenIniHd, gSadIniHd, gTahIniHd, gAinIniHd, gFehIniHd,
		gKafIniHd, gGafIniHd, gLamIniHd, gMeemIniHd, gHehGoalIniHd, gHehDoIniHd);
cIniCh = (gBehIniCh, gJeemIniCh, gSeenIniCh, gSadIniCh, gTahIniCh, gAinIniCh, gFehIniCh,
		gKafIniCh, gGafIniCh, gLamIniCh, gMeemIniCh, gHehGoalIniCh, gHehDoIniCh);
cIniBy = (gBehIniBy, gJeemIniBy, gSeenIniBy, gSadIniBy, gTahIniBy, gAinIniBy, gFehIniBy,
		gKafIniBy, gGafIniBy, gLamIniBy, gMeemIniBy, gHehGoalIniBy, gHehDoIniBy);
cIniBeRe = (gBehIniBeRe, gJeemIniBeRe, gSeenIniBeRe, gSadIniBeRe, gTahIniBeRe, gAinIniBeRe, gFehIniBeRe,
		gKafIniBeRe, gGafIniBeRe, gLamIniBeRe, gMeemIniBeRe, gHehGoalIniBeRe, gHehDoIniBeRe);
cIniBeRe_kx = (gBehIniBeRe, gJeemIniBeRe, gSeenIniBeRe, gSadIniBeRe, gTahIniBeRe, gAinIniBeRe, gFehIniBeRe,
		gKafIniBeRe_alt, gGafIniBeRe_alt, gLamIniBeRe, gMeemIniBeRe, gHehGoalIniBeRe, gHehDoIniBeRe);
cIniBeNn = (gBehIniBeNn, gJeemIniBeNn, gSeenIniBeNn, gSadIniBeNn, gTahIniBeNn, gAinIniBeNn, gFehIniBeNn,
		gKafIniBeNn, gGafIniBeNn, gLamIniBeNn, gMeemIniBeNn, gHehGoalIniBeNn, gHehDoIniBeNn);
cIniBeNn_kx = (gBehIniBeNn, gJeemIniBeNn, gSeenIniBeNn, gSadIniBeNn, gTahIniBeNn, gAinIniBeNn, gFehIniBeNn,
		gKafIniBeNn_alt, gGafIniBeNn_alt, gLamIniBeNn, gMeemIniBeNn, gHehGoalIniBeNn, gHehDoIniBeNn);
cIniBeHg = (gBehIniBeHg, gJeemIniBeHg, gSeenIniBeHg, gSadIniBeHg, gTahIniBeHg, gAinIniBeHg, gFehIniBeHg,
		gKafIniBeHg, gGafIniBeHg, gLamIniBeHg, gMeemIniBeHg, gHehGoalIniBeHg, gHehDoIniBeHg);
cIniBeHg_kx = (gBehIniBeHg, gJeemIniBeHg, gSeenIniBeHg, gSadIniBeHg, gTahIniBeHg, gAinIniBeHg, gFehIniBeHg,
		gKafIniBeHg_alt, gGafIniBeHg_alt, gLamIniBeHg, gMeemIniBeHg, gHehGoalIniBeHg, gHehDoIniBeHg);

// Note gLamIni in these classes:
cIniMmX = (gBehIniMmX, gJeemIniMmX, gSeenIniMmX, gSadIniMmX, gTahIniMmX, gAinIniMmX, gFehIniMmX,
		gKafIniMmX, gGafIniMmX, gLamIni, gMeemIniMmX, gHehGoalIniMmX, gHehDoIniMmX);
cIniMmX_kx = (gBehIniMmX, gJeemIniMmX, gSeenIniMmX, gSadIniMmX, gTahIniMmX, gAinIniMmX, gFehIniMmX,
		gKafIniMmX_alt, gGafIniMmX_alt, gLamIni, gMeemIniMmX, gHehGoalIniMmX, gHehDoIniMmX);

cIniKfX_kx = (gBehIniKfX, gJeemIniKfX, gSeenIniKfX, gSadIniKfX, gTahIniKfX, gAinIniKfX, gFehIniKfX,
		gKafIniKfX_alt, gGafIniKfX_alt, gLamIniKfX, gMeemIniKfX, gHehGoalIniKfX, gHehDoIniKfX);
	

//--cIni_noS = (gBehIni, gJeemIni, gTahIni, gAinIni, gFehIni,
//--		gKafIni, gGafIni, gLamIni, gMeemIni, gHehGoalIni, gHehDoIni);
cIni_raw_noS = (gBehIni_raw, gJeemIni_raw, gTahIni_raw, gAinIni_raw, gFehIni_raw,
		gKafIni_raw, gGafIni_raw, gLamIni_raw, gMeemIni_raw, gHehGoalIni_raw, gHehDoIni_raw);
cIniBe_noS = (gBehIniBe, gJeemIniBe, gTahIniBe, gAinIniBe, gFehIniBe,
		gKafIniBe, gGafIniBe, gLamIniBe, gMeemIniBe, gHehGoalIniBe, gHehDoIniBe);
cIniBe_noS_kx = (gBehIniBe, gJeemIniBe, gTahIniBe, gAinIniBe, gFehIniBe,
		gKafIniBe_alt, gGafIniBe_alt, gLamIniBe, gMeemIniBe, gHehGoalIniBe, gHehDoIniBe);

cIniBeM1_noS = (gBehIniBeM1, gJeemIniBeM1, gTahIniBeM1, gAinIniBeM1, gFehIniBeM1,
		gKafIniBeM1, gGafIniBeM1, gLamIniBeM1, gMeemIniBeM1, gHehGoalIniBeM1, gHehDoIniBeM1);
cIniBeM1_noS_kx = (gBehIniBeM1, gJeemIniBeM1, gTahIniBeM1, gAinIniBeM1, gFehIniBeM1,
		gKafIniBeM1_alt, gGafIniBeM1_alt, gLamIniBeM1, gMeemIniBeM1, gHehGoalIniBeM1, gHehDoIniBeM1);


// before gBehMedBeRe:
cIniBeHg_BeRe = (gBehIniBeM1, gJeemIniBeHg, gSeenIniBeM1, gSadIniBeHg, gTahIniBeHg, gAinIniBeHg, gFehIniBeHg,
		gKafIniBeHg, gGafIniBeHg, gLamIniBeHg, gMeemIniBeHg, gHehGoalIniBeHg, gHehDoIniBeHg);
// ALT-KAF:
////cIniBeHg_BeRe = (gBehIniBeM1, gJeemIniBeHg, gSeenIniBeM1, gSadIniBeHg, gTahIniBeHg, gAinIniBeHg, gFehIniBeHg,
////		gKafIniBeHg_alt, gGafIniBeHg_alt, gLamIniBeHg, gMeemIniBeHg, gHehGoalIniBeHg, gHehDoIniBeHg);

// Unprocessed initials and medials:
cIMraw = (cIni_raw, cMed_raw, gMeemMed_alt_raw, gTehMarbutaGoal_raw, gHehGoalHamza_raw gBehMed_SS_raw, g_zerojoin);

// Before alternate qaf/waw interface:
cPreQwStfhM = (gSeenIni_raw gTahIni_raw gSeenMed_raw gTahMed_raw gFehMed_raw gHehDoMed_raw);

endtable;


pass(3)

// Lam-alef ligatures - not used

/*****
gLamIni_raw  gAlefFin  >  gLamAlef:(1 4)  _  /  _  g__bar? cDiacritic? _ ;

gLamMed_raw  gAlefFin  >  gLamAlefFin:(1 4)  _  /  _  g__bar? cDiacritic? _ ;

gLamIni_raw  gAlefMaddaFin  >  gLamAlefMadda:(1 4)  _  /  _  g__bar? cDiacritic? _ ;

gLamMed_raw  gAlefMaddaFin  >  gLamAlefMaddaFin:(1 4)  _  /  _  g__bar? cDiacritic? _ ;

gLamIni_raw  gAlefHamzaFin  >  gLamAlefHamza:(1 4)  _  /  _  g__bar? cDiacritic? _ ;

gLamMed_raw  gAlefHamzaFin  >  gLamAlefHamzaFin:(1 4)  _  /  _  g__bar? cDiacritic? _ ;
*****/

// Allah

// Standard ligature
gAlef  gLamIni_raw  gLamMed_raw  gHehGoalFin  g__hehHook_small
	>  gLigatureAllah:(1 2 3 4 5) _  _  _  _;
gAlef  gLamIni_raw  gLamMed_raw  g__shadda_kharizabar  gHehGoalFin  g__hehHook_small  
	>  gLigatureAllah:(1 2 3 4 5 6) _  _  _  _  _;

// After something other than an isolate alef,
// eg, \u0628\u0627\u0644\u0644\u06C1,
// \u0627\u0644\u062D\u064E\u0645\u0652\u062F\u0644\u0644\u06C1
(gLamIni_raw gLamMed_raw)  gLamMed_raw  gHehGoalFin  g__hehHook_small
	>  (gLigatureLlah gLigatureLlahFin):(L1 L2 HG HH) _  _  _
	/ (cIMraw c_final c_isolate) MARKS  _=L1  _=L2  _=HG  _=HH;

(gLamIni_raw gLamMed_raw)  gLamMed_raw  g__shadda_kharizabar  gHehGoalFin  g__hehHook_small
	>  (gLigatureLlah gLigatureLlahFin):(L1 L2 SK HG HH)  _  _  _  _
	/ (cIMraw c_final c_isolate) MARKS  _=L1  _=L2  _=SK  _=HG  _=HH;



// And other common ligatures

////gMeemIni_raw  gJeemMed_raw  gMeemMed_raw  gDalFin  >  gLigatureMuhammad:(1 2 3 4) _  _  _;

// Restore eventually if we use this:
////gAlefMaddaAbove gGaf  >  g_alefMaddaGaf:(1 2)  _;


// Finals

(gAlef) // gAlefMaddaAbove gAlefHamzaAbove)
	>  (gAlefFin /*gAlefMaddaFin gAlefHamzaFin*/)  /  (c_initial c_medial)  MARKS  _;

(gWawFin gQafFin)  >  (gWawFin_stfh gQafFin_stfhM)  /  cPreQwStfhM  MARKS _;
// Change feh to qaf for final qaf:
gFehFin  >  gQafFin_stfhM                           /  cPreQwStfhM  MARKS  _  g__dot2u;
gFehFin  >  gQafFin                                 /  _  g__dot2u;


table(glyph)

c_preBe_bfkl = ( gBehIni_raw gFehIni_raw gKafIni_raw gGafIni_raw gLamIni_raw );
c_preChF_bfkl = ( gBehIni_raw gFehIni_raw gKafIni_raw gGafIni_raw gLamIni_raw gKafMed_raw gGafMed_raw gLamMed_raw );
c_preHgF_stfh = ( gSeenIni_raw gTahIni_raw gFehIni_raw gKafIni_raw gGafIni_raw
    gLamIni_raw gMeemIni_raw gHehGoalIni_raw gSeenMed_raw gTahMed_raw gFehMed_raw gKafMed_raw 
    gGafMed_raw gLamMed_raw gHehGoalMed_raw );
c_preReF_jkl = ( gBehIni_raw gJeemIni_raw gKafIni_raw gGafIni_raw gLamIni_raw gKafMed_raw gGafMed_raw gLamMed_raw );   
//c_preReF_sshg = ( gSeenIni_raw gSadIni_raw gHehGoalIni_raw gBehMed_raw gSeenMed_raw gSadMed_raw );
c_preReF_hgM = (gHehGoalMed_raw);

endtable;


gBehFin  >  gBehFin_bfkl	/  ^  c_preBe_bfkl MARKS  _;

gRehFin  >  gRehFin_jkl		/  ^ c_preReF_jkl MARKS  _;
//gRehFin  >  gRehFin_sshg	/  ^ c_preReF_sshg MARKS  _;
gRehFin  >  gRehFin_hgM		/  ^ c_preReF_hgM MARKS  _;

// We've decided not to use the extra heh-goal-final form, since it is so similar.
////(gHehGoalFin gTehMarbutaGoalFin gHehGoalHamzaFin)
////			>  (gHehGoalFin_stfh gTehMarbutaGoalFin_stfh gHehGoalHamzaFin_stfh)
////	/  ^ c_preHgF_stfh MARKS  _;

gChotiyehFin  >  gChotiyehFin_bfkl  /  ^ c_preChF_bfkl MARKS  _ ;

gAlefFin  >  gAlefFin_lm	/  ^ (gLamIni_raw gLamMed_raw) MARKS  _ ;


// Situations where characters before have an effect:

table(glyph)

// Everything BUT lam:
c_kgPreMm_alt = ( gKafIni_raw gGafIni_raw gKafMed_raw gGafMed_raw ) ;
c_preMm_alt = ( gAinIni_raw gAinMed_raw gBehIni_raw gBehMed_raw
	gHehDoIni_raw gHehDoMed_raw gFehIni_raw gFehMed_raw gHehGoalIni_raw gHehGoalMed_raw
	gJeemIni_raw gJeemMed_raw gMeemIni_raw gMeemMed_raw gMeemMed_alt_raw
	gSeenIni_raw gSeenMed_raw gSadIni_raw gSadMed_raw gTahIni_raw gTahMed_raw ) ;


cADL_raw = (gDalFin gLamFin gLamAlefFin gAlefFin gLamMed_raw
	//// gThalFin gDalTwoVertBelowSmallTahFin gDdalFin - no longer used
	//gKafFin gGafFin gKafMed_raw gGafMed_raw - Sheldon says to take these out ("meem before kaf+alef/lam", 10 Feb 2016).
);

c_preBehSS_raw = (gSeenIni_raw gSadIni_raw gSeenMed_raw gSadMed_raw);

c_preBehNn_hgbm = (gHehGoalIni gHehGoalIniBeNn gBehMed gBehMedBeNn gMeemIni gMeemIniBeNn)

endtable;

/****
// Version of rules if final and medials are processed in a single pass:

// Note that we include the final bit of the context to "anchor" the rules
// to the situations where the immediate next character has been processed.

gMeemMed_raw  >  gMeemMed_alt_raw  /  c_kgPreMm_alt  MARKS  ^ _ MARKS  (cADLK cDalFin); // kafs and ghafs
gMeemMed_raw  >  gMeemMed_alt_raw  /  c_preMm_alt   MARKS  ^ _ MARKS  cADLK;			// others

// also see below
gBehMed_raw  >  gBehMed_SS_raw  / c_preBehSS_raw MARKS  ^ _ MARKS  (c_medial cFinals);
****/

// Version of above rules if finals and medials are separated into separate passes:

///gMeemMed_raw  >  gMeemMed_alt_raw  /  c_kgPreMm_alt  MARKS  _ MARKS  ^ temp_cADLK_raw; // kafs and ghafs
///gMeemMed_raw  >  gMeemMed_alt_raw  /  c_preMm_alt   MARKS  _ MARKS  ^ cADLK_raw;			// others

gMeemMed_raw  >  gMeemMed_alt_raw  /  (c_kgPreMm_alt c_preMm_alt)  MARKS _ MARKS ^ cADL_raw;

// also see below
gBehMed_raw  >  gBehMed_SS_raw  / c_preBehSS_raw MARKS  _ ;

endpass;

	
pass(4) { MaxBackup = 50; MaxRuleLoop = 200 }
	
//-----  Medials  -----

// Included in all medial rules to handle the pre-context to back up over:
#define MPRECXT   cIMraw MARKS

#if (QUICKCOMPILE == 0)


//////cMed_raw_noS  >  cMedBeM1_noS     /  ^ MPRECXT  _ MARKS  (gBehMedBeM2 gBehMedSn gBehMedBe gBehMedBeHg);  //  \u0633\u06a9\u0628\u0628\u0627

//////cMed_raw  >  cMedBeM1  /  ^ MPRECXT  _ MARKS  gBehMedBeM2 MARKS  gBehMed MARKS  c_dkgal_postAlt;   //  \u0644\u0644\u0628\u0628\u0627
//////cMed_raw  >  cMedBeM1  /  ^ MPRECXT  _ MARKS  gBehMedBeM2 MARKS  gBehMedBeNn;    // \u0633\u06a9\u0628\u0628\u0628\u0646

//////cMed_raw  >  cMedBeM1  /  ^ MPRECXT  _ MARKS  (gBehMedSn gBehMedBe  gBehMedBeHg);
//////cMed_raw  >  cMedBeM1  /  ^ MPRECXT  _ MARKS  gBehMedBeM2;

table(glyph)
cMed_postBeM1 = (gBehMedBeM2  gBehMedSn  gBehMedBe  gBehMedBeHg);
cBehMed_defaultEntrance = (cBehMed_postBeM  gBehMedHd);
endtable;



/////cMed_raw  gBehMed  >  cMedBeM1  gBehMedBeM2  /  ^ MPRECXT  _ MARKS  _ MARKS  gBehMed MARKS  c_dkgal_postAlt;  //     \u062c\u0639\u0628\u0628\u0627
/////cMed_raw  gBehMed  >  cMedBeM1  gBehMedBeM2  /  ^ MPRECXT  _ MARKS  _ MARKS  (gBehMedBeNn  gBehMedBeM1);


///////////(gKafMed_raw gGafMed_raw)	>  (gKafMedBeM2 gGafMedBeM2)  /  ^ MPRECXT  _ gBehMed  MARKS  c_dkgal_postAlt;  // \u0633\u06a9\u0628\u0644

///////////cMed_raw  >  cMedBeM2  /  ^  MPRECXT  _ MARKS  gBehMed MARKS  c_dkgal;    // \u0644\u0637\u0628\u062f

/////cMed_raw  >  cMedBeM2  /  ^  MPRECXT  _ MARKS  (gBehMedBeNn  gBehMedBeM1);   // \u0644\u0641\u0628\u0628\u0646

// Initial and medial:
gBehIni_raw  gBehMed_raw  >  gBehIniBeM2  gBehMedHgF_be  /  _  MARKS  _  MARKS  cHehGoalFin;
																		// \u0644\u0641\u0628\u0628\u0628\u0628\u0628\u0633

(gSeenMed_raw gSadMed_raw)  >  (gSeenMedBeM1 gSadMedBeM1) /  ^ MPRECXT  _ MARKS  cBehMed_postSmedBeM1;
(gSeenMed_raw gSadMed_raw)  >  (gSeenMedBe gSadMedBe)  / ^ MPRECXT  _ MARKS  cBehMed_postSBe;

gMeemMed_raw  >  gMeemMedBeNn_alt  / ^ c_preMm_alt MARKS  _  MARKS  gBehMedNn;

// Use sad interface for rounded kafs:
cMed_raw  >  cMedSd  /  ^ MPRECXT  _  MARKS  (gKafMed gGafMed)  MARKS  c_al_postKround;

(gKafMed_raw gGafMed_raw)  >  (gKafMedDk gGafMedDk)  / ^ MPRECXT _  MARKS  (c_dkg_noKalt cKafMed);

cMed_raw  >  cMedBe     / ^ MPRECXT  _ MARKS  cBehMed_defaultEntrance;
cMed_raw  >  cMedBeM1  /  ^ MPRECXT  _ MARKS  cMed_postBeM1;

cMed_raw  >  cMedMmX  / ^ MPRECXT  _  MARKS  cMeemMed_alt;

cMed_raw  >  cMedBeRe  / ^ MPRECXT  _ MARKS  gBehMedRe;
cMed_raw  >  cMedBeNn  / ^ MPRECXT  _ MARKS  (gBehMedNn gBehMedNn_hgbm);
cMed_raw  >  cMedBeHg  / ^ MPRECXT  _ MARKS  (gBehMedHgF gBehMedBeRe);
cMed_raw  >  cMedBe  / ^ MPRECXT  _ MARKS  cBehMed_postBeM;
cMed_raw  >  cMedBe  / ^ MPRECXT  _ MARKS  gBehMed  cKafMed_alt;


gBehMed_SS_raw  >  gBehMedBeRe  /  ^ MPRECXT  _ MARKS  gBehMedRe;

cMed_raw  >  cMedBeM2  / ^ MPRECXT  _ MARKS  (gBehMedBeM1 gBehMedBeNn);
cMed_raw  >  cMedBeM2  / ^ MPRECXT  _ MARKS  gBehMed;  ///  MARKS  c_dkgal_postAlt; - superfluous context?


// Basic rules
cMed_raw  >  cMedBeF	/  ^ MPRECXT  _ MARKS  cBehFin;
cMed_raw  >  cMedJm		/  ^ MPRECXT  _ MARKS  (cJeemFin cJeemMed);
cMed_raw  >  cMedRe		/  ^ MPRECXT  _ MARKS  cRehFin;
cMed_raw  >  cMedSn		/  ^ MPRECXT  _ MARKS  (cSeenFin cSeenMed);
cMed_raw  >  cMedSd		/  ^ MPRECXT  _ MARKS  (cSadFin cSadMed);
cMed_raw  >  cMedTaF	/  ^ MPRECXT  _ MARKS  cTahFin;
cMed_raw  >  cMedTaM	/  ^ MPRECXT  _ MARKS  cTahMed; 
cMed_raw  >  cMedAi		/  ^ MPRECXT  _ MARKS  (cAinFin cAinMed);
// The .fe forms are relatively "neutral" in shape and so are a good choice to precede the ZWJ:
cMed_raw  >  cMedFe		/  ^ MPRECXT  _ MARKS  (cFehFin cFehMed g_zerojoin);
cMed_raw  >  cMedQf		/  ^ MPRECXT  _ MARKS  c_qw; // qaf, waw
cMed_raw  >  cMedMm		/  ^ MPRECXT  _ MARKS  (cMeemFin cMeemMed);
cMed_raw  >  cMedNn		/  ^ MPRECXT  _ MARKS  cNoonFin;
cMed_raw  >  cMedHgF	/  ^ MPRECXT _  MARKS  cHehGoalFin;
cMed_raw  >  cMedHgM	/  ^ MPRECXT _  MARKS  cHehGoalMed;
cMed_raw  >  cMedHd		/  ^ MPRECXT _  MARKS  (gHehDoFin cHehDoMed);
cMed_raw  >  cMedCh		/  ^ MPRECXT _  MARKS  cChotiyehFin;
cMed_raw  >  cMedBy		/  ^ MPRECXT _  MARKS  cBariyehFin;

cMed_raw  >  cMedBe		/  ^ MPRECXT  _ MARKS  cTehMarbutaFin;	// use pre-beh forms before teh-marbuta

gLamMed_raw  >  gLamMedAl	/  ^ MPRECXT _  MARKS  gAlefFin_lm;

// No contextual forms for this glyph:
gMeemMed_alt_raw  >  gMeemMed_alt	/ ^ MPRECXT _  MARKS  (c_medial c_final);

#endif // !QUICKCOMPILE

// Last resort:

cMed_raw  >  cMed	/ ^ MPRECXT _  MARKS  (c_medial c_final);


endpass;


pass(5)

// -----  Initials  -----

#if (QUICKCOMPILE == 0)

/////////(gKafIni_raw gGafIni_raw)  >  (gKafIniBeM2 gGafIniBeM2)  /  _ MARKS  gBehMed MARKS  c_dkgal_postAlt;

(gSeenIni_raw gSadIni_raw)  >  (gSeenIniBeM1 gSadIniBeM1) /  _ MARKS  cBehMed_postSiniBeM1;
(gSeenIni_raw gSadIni_raw)  >  (gSeenIniBe gSadIniBe)     /  _ MARKS  cBehMed_postSBe;

gBehIni_raw  >  gBehIniMmM  /  _ MARKS  cMeemMed;  // before standard meem

cIni_raw  >  cIniBeHg_BeRe  / _ MARKS  gBehMedBeRe; // eg, \u0644\u0628\u0646\u0631

cIni_raw  >  cIniBeRe  /  _ MARKS  gBehMedRe;
cIni_raw  >  cIniBeNn  /  _ MARKS  (gBehMedNn gBehMedNn_hgbm);
cIni_raw  >  cIniBeHg  /  _ MARKS  gBehMedHgF;

// SS cases handled above:
cIni_raw_noS  >  cIniBe_noS       /  _ MARKS  cBehMed_defaultEntrance;
cIni_raw_noS  >  cIniBeM1_noS     /  _ MARKS  cMed_postBeM1;

cIni_raw  >  cIniBeM2  /  _ MARKS  (gBehMed gBehMedBeM1 gBehMedBeNn);

////gLamIni_raw  >  gLamIniMm /  _ MARKS  cMeemMed_alt; // exception to rule below - can never happen
cIni_raw     >  cIniMmX /  _ MARKS  cMeemMed_alt;


// Use a smaller form of the kaf before lam.
// Do we really want this rule? If not comment out.
///(gKafIni_raw gGafIni_raw)  >  (gKafIniLm  gGafIniLm)  /  _ MARKS  gLamFin;

(gKafIni_raw gGafIni_raw)  >  (gKafIniKf gGafIniKf)  /  _ MARKS  (gKafFin gGafFin cKafMed);
(gKafIni_raw gGafIni_raw)  >  (gKafIniDk gGafIniDk)  /  _ MARKS  gDalFin;   // was c_dkg_noKalt;

// Use sad interface before rounded kafs:
cIni_raw  >  cIniSd  /  ^ _  MARKS  (gKafMed gGafMed) MARKS  c_al_postKround;

//////cIni_raw  >  cIniKfX_kx  /  _ MARKS  cKafMed_justAlt;


//cIni_raw_noS  >  cIniBeM1_noS_kx  /  _ MARKS  cBehMed_postBeM;  // ALT-KAF
//////cIni_raw_noS  >  cIniBeM1_noS     /  _ MARKS  cBehMed_postBeM;


// Basic rules
cIni_raw  >  cIniBeM2F	/ _ MARKS  cBehFin;
cIni_raw  >  cIniJm		/ _ MARKS  (cJeemFin cJeemMed);
cIni_raw  >  cIniRe		/ _ MARKS  cRehFin;
cIni_raw  >  cIniSn		/ _ MARKS  (cSeenFin cSeenMed);
cIni_raw  >  cIniSd		/ _ MARKS  (cSadFin cSadMed);
cIni_raw  >  cIniTaF	/ _ MARKS  cTahFin;
cIni_raw  >  cIniTaM 	/ _ MARKS  cTahMed;
cIni_raw  >  cIniAi		/ _ MARKS  (cAinFin cAinMed);
cIni_raw  >  cIniFe		/ _ MARKS  (cFehFin cFehMed g_zerojoin);
cIni_raw  >  cIniQf		/ _ MARKS  c_qw; // qaf, waw
cIni_raw  >  cIniMm		/ _ MARKS  (cMeemFin cMeemMed);
cIni_raw  >  cIniNn		/ _ MARKS  (cNoonFin gNoonGhunnaFin);
cIni_raw  >  cIniHgF	/ _ MARKS  cHehGoalFin;
cIni_raw  >  cIniHgM	/ _ MARKS  cHehGoalMed;
//cIni_raw  >  cIniHgM_kx	/ _ MARKS  cHehGoalMed;  // ALT-KAF
cIni_raw  >  cIniHd  	/ _ MARKS  (cHehDoFin cHehDoMed);
cIni_raw  >  cIniCh		/ _ MARKS  (cChotiyehFin);
cIni_raw  >  cIniBy  	/ _ MARKS  cBariyehFin;

cIni_raw  >  cIniBe		/ _ MARKS  cTehMarbutaFin;	// use pre-beh forms before teh-marbuta

/***
gBehIni_raw  >  gBehIniBeM2	/ _ MARKS  cBehFin;
gBehIni_raw  >  gBehIniJm	/ _ MARKS  (cJeemFin cJeemMed);
gBehIni_raw  >  gBehIniRe	/ _ MARKS  cRehFin;
gBehIni_raw  >  gBehIniSn	/ _ MARKS  (cSeenFin cSeenMed);
gBehIni_raw  >  gBehIniSd	/ _ MARKS  (cSadFin cSadMed);
gBehIni_raw  >  gBehIniTaF	/ _ MARKS  cTahFin;
gBehIni_raw  >  gBehIniTaM 	/ _ MARKS  cTahMed;
gBehIni_raw  >  gBehIniAi	/ _ MARKS  (cAinFin cAinMed);
gBehIni_raw  >  gBehIniFe	/ _ MARKS  (cFehFin cFehMed g_zerojoin);
gBehIni_raw  >  gBehIniQf	/ _ MARKS  c_qw; // qaf, waw
gBehIni_raw  >  gBehIniMm	/ _ MARKS  (cMeemFin cMeemMed);
gBehIni_raw  >  gBehIniNn	/ _ MARKS  cNoonFin;
gBehIni_raw  >  gBehIniHgF	/ _ MARKS  cHehGoalFin;
gBehIni_raw  >  gBehIniHgM	/ _ MARKS  cHehGoalMed;
gBehIni_raw  >  gBehIniHd  	/ _ MARKS  (cHehDoFin cHehDoMed );
gBehIni_raw  >  gBehIniCh 	/ _ MARKS  cChotiyehFin;
gBehIni_raw  >  gBehIniBy  	/ _ MARKS  cBariyehFin;
***/

gLamIni_raw  >  gLamIniAl	/ _ MARKS  gAlefFin_lm;

#endif // !QUICKCOMPILE


// Last resort:

cIni_raw  >  cIni	/ _  MARKS  (c_medial c_final);


// Final clean-ups

gBehMedNn  >  gBehMedNn_hgbm  /  c_preBehNn_hgbm  MARKS  _;

/////g__hehHook_small  >  g__hehHook_big  /  _  MARKS  gAlefFin;


// TODO: fix the precontext
(cMed_KG_DK gMeemMed_alt)? (gKafMedSn_alt gGafMedSn_alt)  >  @1 (gKafMedSn gGafMedSn)
		/  _ MARKS  _ MARKS  gSeenMed g__dot3u  (cKafMed_alt cKafMed);

/// Eg, 062A 062E 0646 06AF 06A9
gGafMedDk  >  gGafMed_short  /  _ MARKS  (gKafFin gGafFin cKafMed);

endpass; // 5


table(glyph)

cLowerUpper = (	g__dot1l__smallTah,	g__dot2vl__smallTah,	g__dot1l__dot1u,	g__hehHook__dot2u,
	g__ring__dot2u, g__dot2l__hamza, g__hehHook__hamza, g__dot3l__dot3u);
cLowerNoUpper = (g__dot1l,			g__dot2vl,			g__dot1l,		g__hehHook_small,
	g__attachedRing, g__dot2l, g__hehHook_small, g__dot3l);
cUpperNoLower = (g__smallTah,		g__smallTah,		g__dot1u,		g__dot2u,
	g__dot2u, gHamzaAbove, gHamzaAbove, g__dot3u);

cNuqtaLike += (cLowerUpper);

endtable; // glyph


pass(6)

// Alterate (standard Arabic-style) hamza
if (hamzaAlt == 1)

(gHamzaAbove  gHighHamza)  >  (g__hamzaArabic  gHighHamzaArabic);
gJeem    gHamzaAbove  >  gHah  g__hamzaArabic;
(gAlef gWaw gChotiyeh gHehGoal gReh gJeem gBariyeh)  gHamzaAbove  >  @1  g__hamzaArabic;

(gChotiyeh gChotiyehFin)	g__dot2l__hamza		>  @1  g__hamzaArabic;
(gHehGoal gHehGoalFin)		g__hehHook__hamza	>  @1  g__hamzaArabic;
(gBariyeh gBariyehFin)		g__dot2l__hamza		>  @1  g__hamzaArabic;

cHehGoalIni  g__hehHook__hamza  _	>  @1  g__hehHook_small:2  g__hamzaArabic:2;
if (hehGoalHook == 0)
cHehGoalMed  g__hehHook__hamza		>  @1  g__hamzaArabic;
endif;
if (hehGoalHook == 1)
cHehGoalMed  g__hehHook__hamza  _	>  @1  g__hehHook_small:2  g__hamzaArabic:2;
endif;

gAlef  gHighHamza  >  gHighHamzaAlefArabic:(1 2)  _;

(cBehIni  cBehMed)  g__dot2l__hamza	>  @1  g__hamzaArabic:1;

endif; // hamzaAlt

// Recompose isolates.
// These rules are the opposite of the rules in nastaliq_seqNuqtas.gdh.

// See also subtending rules below.

gBeh		g__dot1l				>	gBeh:(1 2)	_;
gBeh		g__dot2u				>	gTeh:(1 2)	_;
gBeh		g__dot3u				>	gTheh:(1 2)	_;
gBeh		g__smallTah				>	gTteh:(1 2)	_;
gBeh		g__dot3l				>	gPeh:(1 2)	_;
gBeh		g__dot2vl				>	gBeeh:(1 2)	_;
gBeh		g__ring__dot2u			>	gTehRing:(1 2)	_;
gBeh		g__dot2vu				>	gTteheh:(1 2)  _;
gBeh		g__dot3uD				>	gTehThreeDotsAboveDownwards:(1 2)  _;

gJeem		g__dot1l				>	gJeem:(1 2)	_;
gJeem								>	gHah;
gJeem		g__dot1u				>	gKhah:(1 2)	_;
gJeem		g__dot3l				>	gTcheh:(1 2)	_;
gJeem		g__dot2vl				>	gDyeh:(1 2)	_;
gJeem		g__dot2l				>	gNyeh:(1 2)	_;
gJeem		g__dot4l				>	gTcheheh:(1 2)	_;
gJeem		g__smallTahBelow		>	gHahSmallTahBelow:(1 2)  _;
gJeem		g__smallTah2dotsBelow	>	gHahSmallTahTwoDots:(1 2)  _;
gJeem		g__dot3u				>	gHahThreeDotsAbove:(1 2)  _;
gJeem		gHamzaAbove				>	gHahHamzaAbove:(1 2)  _;

//gSeen								>	gSeen;
gSeen		g__dot3u				>	gSheen:(1 2)  _;
gSeen		g__dot4u				>	gSeenFourDotsAbove:(1 2)  _;
gSeen		g__dot1l__dot1u			>	gSeenDotBelowDotAbove:(1 2)  _;
gSeen		g__smallTah2dots		>	gSeenSmallTahTwoDots:(1 2)  _;
gSeen		g__dot2vu				>	gSeenTwoVertAbove:(1 2)  _;
gSeen		g__dot3l__dot3u			>	gSeenThreeDotsBelowThreeDotsAbove:(1 2)  _;

//gSad								>	gSad;
gSad		g__dot1u				>	gDad:(1 2)	_;
gSad		g__dot1l__dot1u			>	gDadDotBelow:(1 2)  _;
//gTah								>	gTah;
gTah		g__dot1u				>	gZah:(1 2)	_;
//gAin								>	gAin;
gAin		g__dot1u				>	gGhain:(1 2)	_;
gFeh		g__dot1u				>	gFeh:(1 2)	_;
gFeh		g__dot2u				>	gQaf:(1 2)	_;
gFeh		g__dot3l				>	gFehThreeDotsBelow:(1 2)  _;

//gKaf								>	gKaf;

/**
if (debugGaf == 0)
//gGaf								>	gGaf;
else
gGaf				_				>	gKafIni		g__gafStroke:1;
//////(gGafMed0 gGafFin0)		_	>				(gKafMed_raw gKafFin)		g__gafStroke:1;
endif;
**/

gGaf		g__dot2vl				>	gGueh:(1 2)	_;
gGaf		g__dot2u				>	gNgoeh:(1 2)	_;
gKaf		g__attachedRingMid		>	gKafRing:(1 2)	_;
gGaf		g__attachedRingMid		>	gGafRing:(1 2)  _;
gKaf		g__kafSquiggle			>	gArabicKaf:(1 2)  _;

// Remove squiggle from initial/medial forms.
(cKafIni  cKafMed)  g__kafSquiggle	>	@1:(1 2)  _;

//gLam								>	gLam;
gLam		g__bar					>	gLamBar:(1 2)	_;
gLam		g__smallV				>	gLamSmallV:(1 2)	_;

//gMeem								>	gMeem;

gNoon		g__dot1u				>	gNoon:(1 2)	_;
gNoon		g__dot1u_smallTah		>	gNoonRetro:(1 2)	_;
gNoon		g__dot1l__dot1u			>	gNoonDotBelow:(1 2)	_;
gNoon		g__smallTah				>	gRnoon:(1 2)	_;
gNoon		g__dot1u_smallV			>	gNoonSmallV:(1 2)  _;
//gNoon		g__noDot1u				>	gNoonGhunna:(1 2)  _;
gNoon		g__dot1u_ngMark			>	gNoonGhunna:(1 2)  _;

gNoonFin  g__dot1u_ngMark  >  @1:(1 2)  _;

gHehGoal	g__hehHook_small		>	gHehGoal:(1 2)	_;
gHehGoal	g__hehHook__dot2u		>	gTehMarbutaGoal:(1 2)	_;
gHehGoal	(gHamzaAbove g__hamza)	>	gHehGoalHamza:(1 2)	_;
gHehGoal	g__hehHook__hamza		>	gHehGoalHamza:(1 2) _;

// Remove hooks
gHehGoalFin  g__hehHook_small  >  gHehGoalFin:(1 2)  _;
gHehGoalFin  g__hehHook__dot2u  >  gHehGoalFin        g__dot2u;	 // teh-marbuta goal
gHehGoalFin  g__hehHook__hamza  >  gHehGoalFin        gHamzaAbove;
if (hehGoalHook == 0)
cHehGoalMed  g__hehHook_small  >  cHehGoalMed:(1 2)  _;
cHehGoalMed  g__hehHook__dot2u  >  cHehGoalMed        g__dot2u;	 // teh-marbuta goal
cHehGoalMed  g__hehHook__hamza  >  cHehGoalMed        gHamzaAbove;
endif;

//gHehDo				>	gHehDo;

gChotiyeh	g__noDot2l			>	gChotiyeh:(1 2)  _;
gChotiyeh	g__dot2l__hamza		>	gYehHamzaAbove:(1 2)  _;
gChotiyeh	g__dot2l			>	gYeh:(1 2)  _;
gChotiyeh	g__dot2vl			>	gArabicE:(1 2)  _;
gChotiyeh	g__dot2l_tail		>	gYehTail:(1 2)  _;
gChotiyeh	g__ring				>	gKashmiriYeh:(1 2)  _;

gBariyeh	g__noDot2l			>	gBariyeh:(1 2)  _;
gBariyeh	g__dot2l__hamza		>	gBariyeh  gHamzaAbove;

// Add dots to initial/medial chotiyeh
(cBehIni  cBehMed)  g__noDot2l  >  @1  g__dot2l;
(cBehIni  cBehMed)  g__dot2l__hamza  >  @1  gHamzaAbove:1;

cChotiyehFin  g__noDot2l  >  @1:(1 2)  _;
cChotiyehFin  g__dot2l__hamza  >  @1  gHamzaAbove;

cChotiyehFin  g__dot2l_tail  >  cYehTailFin:(1 2)  _;
cChotiyehFin  g__ring  >  cKashmiriYehFin:(1 2)  _;


gBariyehFin   g__noDot2l  >  @1:(1 2)  _;
gBariyehFin   g__dot2l__hamza  >  @1  gHamzaAbove;

// Right-link
//gBariyeh			_	>	gBehIni:1	g__dot2l:1;
//gArabicBariyehHamzaFin0 _	>	pseudo(postscript("nlqBariyehHamza")):1	 absHamzaAbove:1;	// eventually replaced with beh + bariyeh


//gAlef								>	gAlef;
gAlef		(gHamzaAbove g__hamza)	>	gAlefHamzaAbove:(1 2)  _;
gAlef		(gHamzaBelow g__hamza)	>	gAlefHamzaBelow:(1 2)  _;
gAlef		gMaddaAbove				>	gAlefMaddaAbove:(1 2)  _;
gAlef		g__wavyHamza			>	gAlefWavyHamzaAbove:(1 2)  _;
gAlef		gWavyHamzaBelow			>	gAlefWavyHamzaBelow:(1 2)  _;
gAlef		gHighHamza				>	gHighHamzaAlef:(1 2)  _;

//gDal								>	gDal;
gDal		g__dot1u				>	gThal:(1 2)  _;
gDal		g__smallTah				>	gDdal:(1 2)  _;
gDal		g__dot1l__smallTah		>	gDalDotBelowSmallTah:(1 2)  _;
gDal		g__dot2vl__smallTah		>	gDalTwoVertBelowSmallTah:(1 2)  _;
gDal		g__dot1l				>	gThalDotBelow:(1 2)  _;
gDal		g__attachedRing			>	gDalRing:(1 2)  _;
gDal		g__dot4u				>	gDalFourDotsAbove:(1 2)  _;

//gReh								>	gReh;
gReh		g__dot1u				>	gZain:(1 2)  _;
gReh		g__smallTah				>	gRreh:(1 2)  _;
gReh		g__dot3u				>	gJeh:(1 2)  _;
gReh		g__dot1l				>	gRehDotBelow:(1 2)  _;
gReh		g__dot1l__dot1u			>	gRehDotBelowDotAbove:(1 2)  _;
gReh		g__dot2u				>	gRehTwoDotsAbove:(1 2)  _;
gReh		g__attachedRing			>	gRehRing:(1 2)  _;
gReh		g__dot4u				>	gRehFourDotsAbove:(1 2)  _;
gReh		g__dot2vu				>	gRehTwoVertAbove:(1 2)  _;
gReh		gHamzaAbove				>	gRehHamzaAbove:(1 2)  _;
gReh		g__smallTah2dots		>	gRehSmallTahTwoDots:(1 2)  _;

//gWaw								>	gWaw;
gWaw		(gHamzaAbove g__hamza)	>	gWawHamzaAbove:(1 2)  _;
gWaw		g__attachedRingMid		>	gWawRing:(1 2)  _;
gWaw		g__barWaw				>	gKirghizOe:(1 2)   _;
gWaw		g__smallV				>	gOe:(1 2)  _;
gWaw		g__peshWaw				>	gArabicU:(1 2)  _;

gTehMarbutaGoal	g__dot2u			>	gTehMarbutaGoal:(1 2)  _;

gTehMarbuta		g__dot2u			>	gTehMarbuta:(1 2)  _;
gTehMarbutaGoal	gHamzaAbove			>	gHehYehAbove:(1 2)  _;	// heh-goal-w-hamza -- OR SHOULD THIS BE TEH MARBUTA??


// If no other rule matches, than we do in fact need these nuqtas:
g__noDot1u		>	g__dot1u;
g__noDot2l		>	g__dot2l;
g__dot2l_tail	>	g__dot2l;


// Break lower-and-upper-nuqta glyphs into two separate glyphs, so they can be positioned separately.

cLowerUpper  _  >  cLowerNoUpper  cUpperNoLower$1:1;


// Add a bogus null glyph in case we want to break the kafs into two pieces.
// We need to do it now because we can't do insertions in the positioning table.

cKafIM  _  >  @1  g__kafTop_null:1;


// Special forms of letters

g__bar  >  g__barNarrow  /  _  cDiacritic?  (cSadMed gSadFin);
g__bar  >  g__barNarrow  /  (gLamAlef gLamAlefFin)  _;


if (hehDoachIni == heart)
gHehDoIniQf  gWawFin  >  gHehDoIniQf_alt  gWawFin_stfh;
cHehDoIni_noAlt  >  cHehDoIni_alt;
endif;

if (sukunAlt == jazmLeft)
gJazm  >  gJazm_openleft;
endif;


// Experimental - kaf + lam-bar

cbarDia  >  g__barRaised_gaf  / (cKafIni_gaf cKafMed_gaf)  MARKS  (cLamMed cLamFin)  _=B;
cbarDia  >  g__barRaised  / (cKafIni cKafMed)  MARKS  (cLamMed cLamFin)  _=B;


// See also subtending rules below.

endpass;

table(glyph)

cDigitArabic = (gZero, gOne, gTwo, gThree, gFour, gFive, gSix, gSeven, gEight, gNine);
cDigitArabic_small = (gZero_small, gOne_small, gTwo_small, gThree_small, gFour_small,
	gFive_small, gSix_small, gSeven_small, gEight_small, gNine_small);
cDigitArabic_smaller = (gZero_smaller, gOne_smaller, gTwo_smaller, gThree_smaller, gFour_smaller,
	gFive_smaller, gSix_smaller, gSeven_smaller, gEight_smaller, gNine_smaller);

cDigitEastern = (gEasternZero, gEasternOne, gEasternTwo, gEasternThree, gEasternFour, gEasternFive,
	gEasternSix, gEasternSeven, gEasternEight, gEasternNine);
cDigitEastern_small = (gEasternZero_small, gEasternOne_small, gEasternTwo_small,
	gEasternThree_small, gEasternFour_small, gEasternFive_small,
	gEasternSix_small, gEasternSeven_small, gEasternEight_small, gEasternNine_small);
cDigitEastern_smaller = (gEasternZero_smaller, gEasternOne_smaller, gEasternTwo_smaller,
	gEasternThree_smaller, gEasternFour_smaller, gEasternFive_smaller,
	gEasternSix_smaller, gEasternSeven_smaller, gEasternEight_smaller, gEasternNine_smaller);

cDigitLatin = (g_zero, g_one, g_two, g_three, g_four, g_five, g_six, g_seven, g_eight, g_nine);
cDigitLatin_small = (g_zero_small, g_one_small, g_two_small, g_three_small, g_four_small,
	g_five_small, g_six_small, g_seven_small, g_eight_small, g_nine_small);
cDigitLatin_smaller = (g_zero_smaller, g_one_smaller, g_two_smaller, g_three_smaller, g_four_smaller, 
	g_five_smaller, g_six_smaller, g_seven_smaller, g_eight_smaller, g_nine_smaller);

//cDigitsAny = ( cDigitArabic cDigitEastern cDigitLatin );
cDigitAny = (cDigitLatin, cDigitArabic, cDigitEastern);
cDigitAnySmall = (cDigitLatin_small, cDigitArabic_small, cDigitEastern_small);
cDigitAnySmaller = (cDigitLatin_smaller, cDigitArabic_smaller, cDigitEastern_smaller);


cSignTakes4 = (gYearSign gNumberSign gPageSign); // small
cSign4 = (gYearSign4 gNumberSign4 gPageSign4);

cSignTakes3Small = (gYearSign gNumberSign gPageSign);
cSign3Small = (gYearSign3 gNumberSign3 gPageSign3);
cSignTakes3Smaller  = (gEndOfAyah); // also alternative forms
cSign3Smaller  = (gEndOfAyah3);

cSignTakes2Small = (gYearSign gNumberSign gPageSign gFootnoteSign);
cSign2Small = (gYearSign2 gNumberSign2 gPageSign2 gFootnoteSign2);
cSignTakes2Smaller = (gEndOfAyah);
cSign2Smaller = (gEndOfAyah2);

cSignTakes1Small = (gYearSign gNumberSign gPageSign gFootnoteSign);
cSign1Small = (gYearSign gNumberSign gPageSign gFootnoteSign);
cSignTakes1Smaller = (gEndOfAyah);
cSign1Smaller = (gEndOfAyah);

cSign3 = (cSign3Small, cSign3Smaller);
cSign2 = (cSign2Small, cSign2Smaller);
cSign1 = (cSign1Small, cSign1Smaller);

cSignDigit = (cDigitAnySmall cDigitAnySmaller);

endtable;


pass(7) {Direction = LEFT_TO_RIGHT}
	// Subtending marks
	
	cSignTakes4 cDigitAny cDigitAny cDigitAny cDigitAny  >
		cSign4 cDigitAnySmall cDigitAnySmall cDigitAnySmall cDigitAnySmall;

	cSignTakes3Small cDigitAny cDigitAny cDigitAny  >
		cSign3Small cDigitAnySmall cDigitAnySmall cDigitAnySmall;
		
	cSignTakes3Smaller cDigitAny cDigitAny cDigitAny  >
		cSign3Smaller cDigitAnySmaller cDigitAnySmaller cDigitAnySmaller;
		
	cSignTakes2Small cDigitAny cDigitAny  >
		cSign2Small cDigitAnySmall cDigitAnySmall;

	cSignTakes2Smaller cDigitAny cDigitAny  >
		cSign2Smaller cDigitAnySmaller cDigitAnySmaller;

	cSignTakes1Small cDigitAny  >  cSign1Small  cDigitAnySmall;

	cSignTakes1Smaller cDigitAny  >  cSign1Smaller  cDigitAnySmaller;

#include "cp1252.gdh"

	// Convert symmetrical punctuation where there are not separate characters 
	// for the two scripts:
	cPunctLatin  >  @P  /  cLatin  _=P;
	cPunctLatin  >  cPunctArabic;

endpass; // 7

	// In theory, the rules above should be adequate to handle subtending marks.
	// But there is a bug where some applications don't put these in the right
	// direction. So we provide right-to-left rules as well.

// I don't think this is quite right:
/************
pass(6)

	cDigitAny  cDigitAny  cDigitAny  cDigitAny  cSignTakes4  >
		cDigitAnySmall  cDigitAnySmall  cDigitAnySmall  cDigitAnySmall  cSign4;

	cDigitAny  cDigitAny  cDigitAny  cSignTakes3Small  >
		cDigitAnySmall  cDigitAnySmall  cDigitAnySmall  cSign3Small;
		
	cDigitAny  cDigitAny  cDigitAny  cSignTakes3Smaller  >
		cDigitAnySmaller  cDigitAnySmaller  cDigitAnySmaller  cSign3Smaller;
		
	cDigitAny  cDigitAny  cSignTakes2Small  >
		cDigitAnySmall  cDigitAnySmall  cSign2Small;

	cDigitAny  cDigitAny  cSignTakes2Smaller  >
		cDigitAnySmaller cDigitAnySmaller  cSign2Smaller;

	cDigitAny  cSignTakes1Small  >  cDigitAnySmall  cSign1Small;

	cDigitAny  cSignTakes1Smaller  >  cDigitAnySmaller  cSign1Smaller;

endpass;
************/

endtable;	// sub

